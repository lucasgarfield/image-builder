// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+o7QB9mVEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
